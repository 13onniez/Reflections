pwd # print working directory - shows what directory you are in
ls  # list the files in this directory

mkdir // creates a new file



=====
Q1:
How did viewing a diff between two versions of a file help you see the bug that was introduced?

- comparing two versions of a file let us to pinpoint exactly where the code was changed 
- since the code before was running, but after the changed introduced a bug, by seeing which code changed will allow us to fix the problem through reverting back to the original code

===

Q2:
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

- say you want to revert back to changes made long time ago, a history of these changes will let you make these changes in the blink of an eye
- without this history of changes you made, you might have to find out what you did  (waste of time) 



===
*One commit per logical change
-  each commit should have one clear, logical purpose, and you should never do too much work without committing.


Git command review
git diff: Compare two commits, printing each line that is present in one commit but not the other.

git clone: git clone < the url of the repository to copy. >
 Make a copy of an entire Git repository, including the history, onto your own computer. 
 - cloning will copy directory AND its commit history, copying wont


git checkout: < git clone <ID> >
Temporarily reset all files in a directory to their state at the time of a specific commit.

git log: Show the commits made in this repository, starting with the most recent.

=====

Q3:
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pros: wont have unecessary, redundant changes saved; relevant changes only; only save when you want something to be saved

Cons: might forget to make a commit; downside if forgetful like me and forget to save changes,


===
Q4:
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

- seaprate files in google docs because not coding? 
- commit multiple files because one code might affect the other


====

Q5:
How can you use the commands git log and git diff to view the history of files?

How might using version control make you more confident to make changes that could break something?

- now i wont be a horder and save code :) 
- using version control will let me be more confident and changing code that might potentially cause something to crash because i know ill be able to revert back to a working version later on


========

Q6:
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

- different versions of the game
- experiment with different aspect of project
- new feature
- fixing a bug
- master branch: never break
- development branch
- unique feature branch: might break

====
Q7::
How do the diagrams help you visualize the branch structure?

- understand that each node has a 'parent', and those that dont is the initial branch
- diagrams also allow me to understand which branch is "reachable"